/* eslint-disable @typescript-eslint/no-unsafe-assignment */
/* eslint-disable @typescript-eslint/no-unsafe-member-access */

import {
  Keypair,
  Connection,
  PublicKey,
  LAMPORTS_PER_SOL,
  SystemProgram,
  TransactionInstruction,
  Transaction,
  sendAndConfirmTransaction,
} from '@solana/web3.js';
import fs from 'mz/fs';
import path from 'path';
import * as borsh from 'borsh';

import * as BufferLayout from '@solana/buffer-layout';

import { getPayer, getRpcUrl, createKeypairFromFile, toBuffer } from './utils';

/**
 * Connection to the network
 */
let connection: Connection;

/**
 * Keypair associated to the fees' payer
 */
let payer: Keypair;

/**
 * Hello world's program id
 */
let programId: PublicKey;

/**
 * The public key of the account we are saying hello to
 */
let greetedPubkey: PublicKey;

/**
 * Path to program files
 */
const PROGRAM_PATH = path.resolve(__dirname, '../../dist/program');

/**
 * Path to program shared object file which should be deployed on chain.
 * This file is created when running either:
 *   - `npm run build:program-c`
 *   - `npm run build:program-rust`
 */
const PROGRAM_SO_PATH = path.join(PROGRAM_PATH, 'helloworld.so');

/**
 * Path to the keypair of the deployed program.
 * This file is created when running `solana program deploy dist/program/helloworld.so`
 */
const PROGRAM_KEYPAIR_PATH = path.join(PROGRAM_PATH, 'helloworld-keypair.json');


const SECP256K1_INSTRUCTION_LAYOUT = BufferLayout.struct([
  BufferLayout.u8('numSignatures'),
  BufferLayout.u16('signatureOffset'),
  BufferLayout.u8('signatureInstructionIndex'),
  BufferLayout.u16('ethAddressOffset'),
  BufferLayout.u8('ethAddressInstructionIndex'),
  BufferLayout.u16('messageDataOffset'),
  BufferLayout.u16('messageDataSize'),
  BufferLayout.u8('messageInstructionIndex'),
  BufferLayout.blob(20, 'ethAddress'),
  BufferLayout.blob(64, 'signature'),
  BufferLayout.u8('recoveryId'),
]);

/* 
 * The state of task managed by the program
 */
class Task {
  name = 'DUMMY_NAME';
  lat = '0';
  lng = '0';
  points = 0;
  desc = 'DUMMY_DESC';
  completedBy = 'DUMMY_USER';

  constructor(fields: { name: string, lat: string, lng: string, points: number, desc: string, completedBy: string }) {
    if (fields) {
      this.name = fields.name;
      this.lat = fields.lat;
      this.lng = fields.lng;
      this.points = fields.points;
      this.desc = fields.desc;
      this.completedBy = fields.completedBy;

    }
  }
}

/**
 * Borsh schema definition for greeting accounts
 */
const TaskSchema = new Map([
  [Task, { kind: 'struct', fields: [['name', 'String'], ['lat', 'String'], ['lng', 'String'], ['points', 'u32'], ['desc', 'String'], ['completedBy', 'String']] }],
]);


/**
 * Establish a connection to the cluster
 */
export async function establishConnection(): Promise<void> {
  const rpcUrl = await getRpcUrl();
  connection = new Connection(rpcUrl, 'confirmed');
  const version = await connection.getVersion();
  console.log('Connection to cluster established:', rpcUrl, version);
}

/**
 * Establish an account to pay for everything
 */
export async function establishPayer(name: string, lat: string, lng: string, points: number, desc: string): Promise<void> {
  let fees = 0;

  let TASK_SIZE = borsh.serialize(TaskSchema, new Task({ name: name, lat: lat, lng: lng, points: points, desc: desc, completedBy: 'AvVAd14AQ6hAvMVjJn8WVkc5Mya29xPksgFAaEKGNeM9' })).length;
  if (!payer) {
    const { feeCalculator } = await connection.getRecentBlockhash();

    // Calculate the cost to fund the greeter account
    fees += await connection.getMinimumBalanceForRentExemption(TASK_SIZE);

    // Calculate the cost of sending transactions
    fees += feeCalculator.lamportsPerSignature * 100; // wag

    payer = await getPayer();
  }

  let lamports = await connection.getBalance(payer.publicKey);
  if (lamports < fees) {
    // If current balance is not enough to pay for fees, request an airdrop
    const sig = await connection.requestAirdrop(
      payer.publicKey,
      fees - lamports,
    );
    await connection.confirmTransaction(sig);
    lamports = await connection.getBalance(payer.publicKey);
  }

  console.log(
    'Using account',
    payer.publicKey.toBase58(),
    'containing',
    lamports / LAMPORTS_PER_SOL,
    'SOL to pay for fees',
  );
}

/**
 * Check if the hello world BPF program has been deployed
 */
export async function checkProgram(name: string, lat: string, lng: string, points: number, desc: string): Promise<void> {
  // Read program id from keypair file
  try {
    const programKeypair = await createKeypairFromFile(PROGRAM_KEYPAIR_PATH);
    programId = programKeypair.publicKey;
  } catch (err) {
    const errMsg = (err as Error).message;
    throw new Error(
      `Failed to read program keypair at '${PROGRAM_KEYPAIR_PATH}' due to error: ${errMsg}. Program may need to be deployed with \`solana program deploy dist/program/helloworld.so\``,
    );
  }

  // Check if the program has been deployed
  const programInfo = await connection.getAccountInfo(programId);
  if (programInfo === null) {
    if (fs.existsSync(PROGRAM_SO_PATH)) {
      throw new Error(
        'Program needs to be deployed with `solana program deploy dist/program/helloworld.so`',
      );
    } else {
      throw new Error('Program needs to be built and deployed');
    }
  } else if (!programInfo.executable) {
    throw new Error(`Program is not executable`);
  }
  console.log(`Using program ${programId.toBase58()}`);

  // Derive the address (public key) of a greeting account from the program so that it's easy to find later. 
  let SEED = [name, lat, lng].join("");
  console.log('Before createWithSeed');
  greetedPubkey = await PublicKey.createWithSeed(
    payer.publicKey,
    SEED,
    programId,
  );


  let TASK_SIZE = borsh.serialize(TaskSchema, new Task({ name: name, lat: lat, lng: lng, points: points, desc: desc, completedBy: 'AvVAd14AQ6hAvMVjJn8WVkc5Mya29xPksgFAaEKGNeM9' })).length;

  // Check if the greeting account has already been created
  const greetedAccount = await connection.getAccountInfo(greetedPubkey);
  if (greetedAccount === null) {
    console.log(
      'Creating task',
      greetedPubkey.toBase58(),
      'to capture',
      SEED
    );
    const lamports = await connection.getMinimumBalanceForRentExemption(
      TASK_SIZE,
    );

    console.log('Before Transaction().add()');

    const transaction = new Transaction().add(
      SystemProgram.createAccountWithSeed({
        fromPubkey: payer.publicKey,
        basePubkey: payer.publicKey,
        seed: SEED,
        newAccountPubkey: greetedPubkey,
        lamports,
        space: TASK_SIZE,
        programId,
      }),
    );
    console.log('Transaction is ');
    console.log(transaction);
    await sendAndConfirmTransaction(connection, transaction, [payer]);
  }
}

/*
 * Complete / capture task
 */

export async function completeTask(name: string, lat: string, lng: string, points: number, desc: string, completedBy: string): Promise<void> {
  console.log('Completing task', greetedPubkey.toBase58(), ' using ');

  let TASK = borsh.serialize(TaskSchema, new Task({ name: name, lat: lat, lng: lng, points: points, desc: desc, completedBy: completedBy }));

  let TASK_SIZE = borsh.serialize(TaskSchema, new Task({ name: name, lat: lat, lng: lng, points: points, desc: desc, completedBy: completedBy })).length;

  const instructionData = Buffer.alloc(TASK.length);

  instructionData.fill(toBuffer(TASK));

  console.log('instr data is ');
  console.log(instructionData);

  const instruction = new TransactionInstruction({
    keys: [{ pubkey: greetedPubkey, isSigner: false, isWritable: true }],
    programId,
    data: instructionData,
  });
  await sendAndConfirmTransaction(connection, new Transaction().add(instruction), [payer]);
}

/**
 * Get the task from on-chain
 */

export async function readTask(): Promise<void> {
  const accountInfo = await connection.getAccountInfo(greetedPubkey);
  if (accountInfo === null) {
    throw 'Error: cannot find the task account';
  }
  console.log('account infor is');
  console.log(accountInfo);
  const task = borsh.deserialize(TaskSchema, Task, accountInfo.data,);
  console.log(greetedPubkey.toBase58(), 'is', task);
}
